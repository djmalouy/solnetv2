generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Company {
  id        Int      @id @default(autoincrement())
  name      String
  branches  Branch[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Branch {
  id        Int      @id @default(autoincrement())
  name      String
  address   String?
  company   Company  @relation(fields: [companyId], references: [id])
  companyId Int
  users     User[]
  customers Customer[]
  repairs   Repair[]
  sales     Sale[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id            Int       @id @default(autoincrement())
  username      String    @unique
  email         String?   @unique
  passwordHash  String
  isActive      Boolean   @default(true)
  isImmutable   Boolean   @default(false)
  branch        Branch?   @relation(fields: [branchId], references: [id])
  branchId      Int?
  roles         UserRole[]
  auditLogs     AuditLog[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Role {
  id        Int             @id @default(autoincrement())
  name      String          @unique
  users     UserRole[]
  perms     RolePermission[]
}

model Permission {
  id    Int     @id @default(autoincrement())
  code  String  @unique
  roles RolePermission[]
}

model UserRole {
  userId Int
  roleId Int
  user   User @relation(fields: [userId], references: [id])
  role   Role @relation(fields: [roleId], references: [id])
  @@id([userId, roleId])
}

model RolePermission {
  roleId Int
  permId Int
  role   Role       @relation(fields: [roleId], references: [id])
  perm   Permission @relation(fields: [permId], references: [id])
  @@id([roleId, permId])
}

model Customer {
  id         Int       @id @default(autoincrement())
  firstName  String
  lastName   String
  email      String?
  phone      String?
  address    String?   
  branch     Branch    @relation(fields: [branchId], references: [id])
  branchId   Int
  repairs    Repair[]
  sales      Sale[]
  deletedAt  DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Repair {
  id             Int       @id @default(autoincrement())
  customer       Customer  @relation(fields: [customerId], references: [id])
  customerId     Int
  branch         Branch    @relation(fields: [branchId], references: [id])
  branchId       Int
  device         String
  brand          String?   
  model          String?   
  notes          String?
  keyCode        String?   
  chip           Boolean?  
  memoryCard     Boolean?  
  golpes         Boolean?  
  protectorCase  Boolean?  
  turnsOn        Boolean?  
  deposit        Decimal?  @db.Decimal(12,2)
  total          Decimal?  @db.Decimal(12,2)
  currency       String     @default("UYU")
  status         RepairStatus @default(RECIBIDO)
  readyAt        DateTime?
  deletedAt      DateTime?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
}

enum RepairStatus {
  RECIBIDO
  DIAGNOSTICO
  EN_REPARACION
  LISTO
  ENTREGADO
  CANCELADO
}

model Sale {
  id            Int        @id @default(autoincrement())
  customer      Customer?  @relation(fields: [customerId], references: [id])
  customerId    Int?
  branch        Branch     @relation(fields: [branchId], references: [id])
  branchId      Int
  items         SaleItem[]
  subtotal      Decimal    @db.Decimal(12,2)
  tax           Decimal    @db.Decimal(12,2)
  total         Decimal    @db.Decimal(12,2)
  currency      String     @default("UYU")
  status        SaleStatus @default(PAGADA)
  observations  String?    // agregado
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

enum SaleStatus {
  PENDIENTE
  PAGADA
  ANULADA
}

model SaleItem {
  id         Int      @id @default(autoincrement())
  sale       Sale     @relation(fields: [saleId], references: [id])
  saleId     Int
  sku        String
  name       String
  qty        Int
  unitPrice  Decimal  @db.Decimal(12,2)
  subTotal   Decimal  @db.Decimal(12,2)
}

model AuditLog {
  id        Int      @id @default(autoincrement())
  user      User?    @relation(fields: [userId], references: [id])
  userId    Int?
  ip        String?
  action    String
  entity    String
  entityId  String?
  details   String?
  createdAt DateTime @default(now())
}
